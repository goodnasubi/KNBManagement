//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.237
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

namespace KNBManagement
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using KNBManagement.Web;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace KNBManagement.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    using KNBManagement.Web.Resources;
    
    
    /// <summary>
    /// The domain context corresponding to the 'AuthenticationService' domain service.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("KNBManagement-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AuthenticationService service URI.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entities that have been loaded into this <see cref="AuthenticationContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AuthenticationService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// The 'BusinessType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/KNBManagement.Web")]
    public sealed partial class BusinessType : Entity
    {
        
        private Guid _businessTypeID;
        
        private EntityCollection<Company> _companies;
        
        private EntityCollection<JournalItemBiz> _journalItemBizs;
        
        private string _name;
        
        private byte[] _ts;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBusinessTypeIDChanging(Guid value);
        partial void OnBusinessTypeIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnTSChanging(byte[] value);
        partial void OnTSChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessType"/> class.
        /// </summary>
        public BusinessType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BusinessTypeID' value.
        /// </summary>
        [DataMember()]
        [Display(Name="BusinessTypeIDLabel", Order=1, ResourceType=typeof(KNBManageDataResources), ShortName="BusinessTypeIDCol")]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public Guid BusinessTypeID
        {
            get
            {
                return this._businessTypeID;
            }
            set
            {
                if ((this._businessTypeID != value))
                {
                    this.OnBusinessTypeIDChanging(value);
                    this.ValidateProperty("BusinessTypeID", value);
                    this._businessTypeID = value;
                    this.RaisePropertyChanged("BusinessTypeID");
                    this.OnBusinessTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Company"/> entities.
        /// </summary>
        [Association("BusinessType_Company", "BusinessTypeID", "BusinessTypeID")]
        [XmlIgnore()]
        public EntityCollection<Company> Companies
        {
            get
            {
                if ((this._companies == null))
                {
                    this._companies = new EntityCollection<Company>(this, "Companies", this.FilterCompanies, this.AttachCompanies, this.DetachCompanies);
                }
                return this._companies;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="JournalItemBiz"/> entities.
        /// </summary>
        [Association("BusinessType_JournalItemBiz", "BusinessTypeID", "BusinessTypeID")]
        [XmlIgnore()]
        public EntityCollection<JournalItemBiz> JournalItemBizs
        {
            get
            {
                if ((this._journalItemBizs == null))
                {
                    this._journalItemBizs = new EntityCollection<JournalItemBiz>(this, "JournalItemBizs", this.FilterJournalItemBizs, this.AttachJournalItemBizs, this.DetachJournalItemBizs);
                }
                return this._journalItemBizs;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Display(Name="BusinessTypeNameLabel", Order=2, ResourceType=typeof(KNBManageDataResources), ShortName="BusinessTypeNameCol")]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TS' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false)]
        [RoundtripOriginal()]
        [Timestamp()]
        public byte[] TS
        {
            get
            {
                return this._ts;
            }
            set
            {
                if ((this._ts != value))
                {
                    this.OnTSChanging(value);
                    this.ValidateProperty("TS", value);
                    this._ts = value;
                    this.RaisePropertyChanged("TS");
                    this.OnTSChanged();
                }
            }
        }
        
        private void AttachCompanies(Company entity)
        {
            entity.BusinessType = this;
        }
        
        private void DetachCompanies(Company entity)
        {
            entity.BusinessType = null;
        }
        
        private bool FilterCompanies(Company entity)
        {
            return (entity.BusinessTypeID == this.BusinessTypeID);
        }
        
        private void AttachJournalItemBizs(JournalItemBiz entity)
        {
            entity.BusinessType = this;
        }
        
        private void DetachJournalItemBizs(JournalItemBiz entity)
        {
            entity.BusinessType = null;
        }
        
        private bool FilterJournalItemBizs(JournalItemBiz entity)
        {
            return (entity.BusinessTypeID == this.BusinessTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._businessTypeID;
        }
    }
    
    /// <summary>
    /// The 'Company' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/KNBManagement.Web")]
    public sealed partial class Company : Entity
    {
        
        private EntityRef<BusinessType> _businessType;
        
        private Guid _businessTypeID;
        
        private Guid _companyID;
        
        private string _companyKey;
        
        private string _companyName;
        
        private EntityCollection<Employee> _employees;
        
        private EntityCollection<Journal> _journal;
        
        private EntityCollection<JournalDetail> _journalDetails;
        
        private EntityCollection<JournalItemComp> _journalItemComps;
        
        private EntityCollection<Slip> _slips;
        
        private byte[] _ts;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBusinessTypeIDChanging(Guid value);
        partial void OnBusinessTypeIDChanged();
        partial void OnCompanyIDChanging(Guid value);
        partial void OnCompanyIDChanged();
        partial void OnCompanyKeyChanging(string value);
        partial void OnCompanyKeyChanged();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnTSChanging(byte[] value);
        partial void OnTSChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Company"/> class.
        /// </summary>
        public Company()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="BusinessType"/> entity.
        /// </summary>
        [Association("BusinessType_Company", "BusinessTypeID", "BusinessTypeID", IsForeignKey=true)]
        [XmlIgnore()]
        public BusinessType BusinessType
        {
            get
            {
                if ((this._businessType == null))
                {
                    this._businessType = new EntityRef<BusinessType>(this, "BusinessType", this.FilterBusinessType);
                }
                return this._businessType.Entity;
            }
            set
            {
                BusinessType previous = this.BusinessType;
                if ((previous != value))
                {
                    this.ValidateProperty("BusinessType", value);
                    if ((previous != null))
                    {
                        this._businessType.Entity = null;
                        previous.Companies.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.BusinessTypeID = value.BusinessTypeID;
                    }
                    else
                    {
                        this.BusinessTypeID = default(Guid);
                    }
                    this._businessType.Entity = value;
                    if ((value != null))
                    {
                        value.Companies.Add(this);
                    }
                    this.RaisePropertyChanged("BusinessType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BusinessTypeID' value.
        /// </summary>
        [DataMember()]
        [Display(Name="BusinessTypeIDLabel", Order=4, ResourceType=typeof(KNBManageDataResources), ShortName="BusinessTypeIDCol")]
        [Required()]
        [RoundtripOriginal()]
        public Guid BusinessTypeID
        {
            get
            {
                return this._businessTypeID;
            }
            set
            {
                if ((this._businessTypeID != value))
                {
                    this.OnBusinessTypeIDChanging(value);
                    this.RaiseDataMemberChanging("BusinessTypeID");
                    this.ValidateProperty("BusinessTypeID", value);
                    this._businessTypeID = value;
                    this.RaiseDataMemberChanged("BusinessTypeID");
                    this.OnBusinessTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Display(Name="CompanyIDLabel", Order=1, ResourceType=typeof(KNBManageDataResources), ShortName="CompanyIDCol")]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public Guid CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaisePropertyChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyKey' value.
        /// </summary>
        [DataMember()]
        [Display(Name="CompanyKeyLabel", Order=3, ResourceType=typeof(KNBManageDataResources), ShortName="CompanyKeyCol")]
        [Required()]
        public string CompanyKey
        {
            get
            {
                return this._companyKey;
            }
            set
            {
                if ((this._companyKey != value))
                {
                    this.OnCompanyKeyChanging(value);
                    this.RaiseDataMemberChanging("CompanyKey");
                    this.ValidateProperty("CompanyKey", value);
                    this._companyKey = value;
                    this.RaiseDataMemberChanged("CompanyKey");
                    this.OnCompanyKeyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="CompanyNameLabel", Order=2, ResourceType=typeof(KNBManageDataResources), ShortName="CompanyNameCol")]
        [Required()]
        public string CompanyName
        {
            get
            {
                return this._companyName;
            }
            set
            {
                if ((this._companyName != value))
                {
                    this.OnCompanyNameChanging(value);
                    this.RaiseDataMemberChanging("CompanyName");
                    this.ValidateProperty("CompanyName", value);
                    this._companyName = value;
                    this.RaiseDataMemberChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Employee"/> entities.
        /// </summary>
        [Association("Company_Employee", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<Employee> Employees
        {
            get
            {
                if ((this._employees == null))
                {
                    this._employees = new EntityCollection<Employee>(this, "Employees", this.FilterEmployees, this.AttachEmployees, this.DetachEmployees);
                }
                return this._employees;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Journal"/> entities.
        /// </summary>
        [Association("Company_Journal", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<Journal> Journal
        {
            get
            {
                if ((this._journal == null))
                {
                    this._journal = new EntityCollection<Journal>(this, "Journal", this.FilterJournal, this.AttachJournal, this.DetachJournal);
                }
                return this._journal;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="JournalDetail"/> entities.
        /// </summary>
        [Association("Company_JournalDetail", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<JournalDetail> JournalDetails
        {
            get
            {
                if ((this._journalDetails == null))
                {
                    this._journalDetails = new EntityCollection<JournalDetail>(this, "JournalDetails", this.FilterJournalDetails, this.AttachJournalDetails, this.DetachJournalDetails);
                }
                return this._journalDetails;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="JournalItemComp"/> entities.
        /// </summary>
        [Association("Company_JournalItemComp", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<JournalItemComp> JournalItemComps
        {
            get
            {
                if ((this._journalItemComps == null))
                {
                    this._journalItemComps = new EntityCollection<JournalItemComp>(this, "JournalItemComps", this.FilterJournalItemComps, this.AttachJournalItemComps, this.DetachJournalItemComps);
                }
                return this._journalItemComps;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Slip"/> entities.
        /// </summary>
        [Association("Company_Slip", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<Slip> Slips
        {
            get
            {
                if ((this._slips == null))
                {
                    this._slips = new EntityCollection<Slip>(this, "Slips", this.FilterSlips, this.AttachSlips, this.DetachSlips);
                }
                return this._slips;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TS' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false)]
        [RoundtripOriginal()]
        [Timestamp()]
        public byte[] TS
        {
            get
            {
                return this._ts;
            }
            set
            {
                if ((this._ts != value))
                {
                    this.OnTSChanging(value);
                    this.ValidateProperty("TS", value);
                    this._ts = value;
                    this.RaisePropertyChanged("TS");
                    this.OnTSChanged();
                }
            }
        }
        
        private bool FilterBusinessType(BusinessType entity)
        {
            return (entity.BusinessTypeID == this.BusinessTypeID);
        }
        
        private void AttachEmployees(Employee entity)
        {
            entity.Company = this;
        }
        
        private void DetachEmployees(Employee entity)
        {
            entity.Company = null;
        }
        
        private bool FilterEmployees(Employee entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachJournal(Journal entity)
        {
            entity.Company = this;
        }
        
        private void DetachJournal(Journal entity)
        {
            entity.Company = null;
        }
        
        private bool FilterJournal(Journal entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachJournalDetails(JournalDetail entity)
        {
            entity.Company = this;
        }
        
        private void DetachJournalDetails(JournalDetail entity)
        {
            entity.Company = null;
        }
        
        private bool FilterJournalDetails(JournalDetail entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachJournalItemComps(JournalItemComp entity)
        {
            entity.Company = this;
        }
        
        private void DetachJournalItemComps(JournalItemComp entity)
        {
            entity.Company = null;
        }
        
        private bool FilterJournalItemComps(JournalItemComp entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachSlips(Slip entity)
        {
            entity.Company = this;
        }
        
        private void DetachSlips(Slip entity)
        {
            entity.Company = null;
        }
        
        private bool FilterSlips(Slip entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._companyID;
        }
    }
    
    public enum CreateUserStatus
    {
        
        Success = 0,
        
        InvalidUserName = 1,
        
        InvalidPassword = 2,
        
        InvalidQuestion = 3,
        
        InvalidAnswer = 4,
        
        InvalidEmail = 5,
        
        DuplicateUserName = 6,
        
        DuplicateEmail = 7,
        
        Failure = 8,
    }
    
    /// <summary>
    /// The 'Employee' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/KNBManagement.Web")]
    public sealed partial class Employee : Entity
    {
        
        private EntityRef<Company> _company;
        
        private Guid _companyID;
        
        private Guid _employeeID;
        
        private string _employeeName;
        
        private string _loginID;
        
        private string _password;
        
        private byte[] _ts;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCompanyIDChanging(Guid value);
        partial void OnCompanyIDChanged();
        partial void OnEmployeeIDChanging(Guid value);
        partial void OnEmployeeIDChanged();
        partial void OnEmployeeNameChanging(string value);
        partial void OnEmployeeNameChanged();
        partial void OnLoginIDChanging(string value);
        partial void OnLoginIDChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnTSChanging(byte[] value);
        partial void OnTSChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Employee"/> class.
        /// </summary>
        public Employee()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_Employee", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.Employees.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(Guid);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.Employees.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Display(Name="CompanyIDLabel", Order=1, ResourceType=typeof(KNBManageDataResources), ShortName="CompanyIDCol")]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public Guid CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeID' value.
        /// </summary>
        [DataMember()]
        [Display(Name="EmployeeIDLabel", Order=2, ResourceType=typeof(KNBManageDataResources), ShortName="EmployeeIDCol")]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public Guid EmployeeID
        {
            get
            {
                return this._employeeID;
            }
            set
            {
                if ((this._employeeID != value))
                {
                    this.OnEmployeeIDChanging(value);
                    this.RaiseDataMemberChanging("EmployeeID");
                    this.ValidateProperty("EmployeeID", value);
                    this._employeeID = value;
                    this.RaiseDataMemberChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="EmployeeNameLabel", Order=3, ResourceType=typeof(KNBManageDataResources), ShortName="EmployeeNameCol")]
        [Required()]
        public string EmployeeName
        {
            get
            {
                return this._employeeName;
            }
            set
            {
                if ((this._employeeName != value))
                {
                    this.OnEmployeeNameChanging(value);
                    this.RaiseDataMemberChanging("EmployeeName");
                    this.ValidateProperty("EmployeeName", value);
                    this._employeeName = value;
                    this.RaiseDataMemberChanged("EmployeeName");
                    this.OnEmployeeNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LoginID' value.
        /// </summary>
        [DataMember()]
        [Display(Name="LoginIDLabel", Order=4, ResourceType=typeof(KNBManageDataResources), ShortName="LoginIDCol")]
        [Required()]
        public string LoginID
        {
            get
            {
                return this._loginID;
            }
            set
            {
                if ((this._loginID != value))
                {
                    this.OnLoginIDChanging(value);
                    this.RaiseDataMemberChanging("LoginID");
                    this.ValidateProperty("LoginID", value);
                    this._loginID = value;
                    this.RaiseDataMemberChanged("LoginID");
                    this.OnLoginIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Password' value.
        /// </summary>
        [DataMember()]
        [Display(Name="PasswordLabel", Order=4, ResourceType=typeof(KNBManageDataResources), ShortName="PasswordCol")]
        [Required()]
        public string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnPasswordChanging(value);
                    this.RaiseDataMemberChanging("Password");
                    this.ValidateProperty("Password", value);
                    this._password = value;
                    this.RaiseDataMemberChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TS' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false)]
        [RoundtripOriginal()]
        [Timestamp()]
        public byte[] TS
        {
            get
            {
                return this._ts;
            }
            set
            {
                if ((this._ts != value))
                {
                    this.OnTSChanging(value);
                    this.ValidateProperty("TS", value);
                    this._ts = value;
                    this.RaisePropertyChanged("TS");
                    this.OnTSChanged();
                }
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._companyID, this._employeeID);
        }
    }
    
    /// <summary>
    /// The 'Journal' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/KNBManagement.Web")]
    public sealed partial class Journal : Entity
    {
        
        private EntityRef<Company> _company;
        
        private Guid _companyID;
        
        private Guid _employeeID;
        
        private EntityCollection<JournalDetail> _journalDetails;
        
        private Guid _journalID;
        
        private string _remarks;
        
        private DateTime _tradingDate;
        
        private byte[] _ts;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCompanyIDChanging(Guid value);
        partial void OnCompanyIDChanged();
        partial void OnEmployeeIDChanging(Guid value);
        partial void OnEmployeeIDChanged();
        partial void OnJournalIDChanging(Guid value);
        partial void OnJournalIDChanged();
        partial void OnRemarksChanging(string value);
        partial void OnRemarksChanged();
        partial void OnTradingDateChanging(DateTime value);
        partial void OnTradingDateChanged();
        partial void OnTSChanging(byte[] value);
        partial void OnTSChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Journal"/> class.
        /// </summary>
        public Journal()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_Journal", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.Journal.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(Guid);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.Journal.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Display(Name="CompanyIDLabel", Order=1, ResourceType=typeof(KNBManageDataResources), ShortName="CompanyIDCol")]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public Guid CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeID' value.
        /// </summary>
        [DataMember()]
        public Guid EmployeeID
        {
            get
            {
                return this._employeeID;
            }
            set
            {
                if ((this._employeeID != value))
                {
                    this.OnEmployeeIDChanging(value);
                    this.RaiseDataMemberChanging("EmployeeID");
                    this.ValidateProperty("EmployeeID", value);
                    this._employeeID = value;
                    this.RaiseDataMemberChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="JournalDetail"/> entities.
        /// </summary>
        [Association("Journal_JournalDetail", "CompanyID,JournalID", "CompanyID,JournalID")]
        [XmlIgnore()]
        public EntityCollection<JournalDetail> JournalDetails
        {
            get
            {
                if ((this._journalDetails == null))
                {
                    this._journalDetails = new EntityCollection<JournalDetail>(this, "JournalDetails", this.FilterJournalDetails, this.AttachJournalDetails, this.DetachJournalDetails);
                }
                return this._journalDetails;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'JournalID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public Guid JournalID
        {
            get
            {
                return this._journalID;
            }
            set
            {
                if ((this._journalID != value))
                {
                    this.OnJournalIDChanging(value);
                    this.RaiseDataMemberChanging("JournalID");
                    this.ValidateProperty("JournalID", value);
                    this._journalID = value;
                    this.RaiseDataMemberChanged("JournalID");
                    this.OnJournalIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Remarks' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Remarks
        {
            get
            {
                return this._remarks;
            }
            set
            {
                if ((this._remarks != value))
                {
                    this.OnRemarksChanging(value);
                    this.RaiseDataMemberChanging("Remarks");
                    this.ValidateProperty("Remarks", value);
                    this._remarks = value;
                    this.RaiseDataMemberChanged("Remarks");
                    this.OnRemarksChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TradingDate' value.
        /// </summary>
        [DataMember()]
        public DateTime TradingDate
        {
            get
            {
                return this._tradingDate;
            }
            set
            {
                if ((this._tradingDate != value))
                {
                    this.OnTradingDateChanging(value);
                    this.RaiseDataMemberChanging("TradingDate");
                    this.ValidateProperty("TradingDate", value);
                    this._tradingDate = value;
                    this.RaiseDataMemberChanged("TradingDate");
                    this.OnTradingDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TS' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false)]
        [RoundtripOriginal()]
        [Timestamp()]
        public byte[] TS
        {
            get
            {
                return this._ts;
            }
            set
            {
                if ((this._ts != value))
                {
                    this.OnTSChanging(value);
                    this.ValidateProperty("TS", value);
                    this._ts = value;
                    this.RaisePropertyChanged("TS");
                    this.OnTSChanged();
                }
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachJournalDetails(JournalDetail entity)
        {
            entity.Journal = this;
        }
        
        private void DetachJournalDetails(JournalDetail entity)
        {
            entity.Journal = null;
        }
        
        private bool FilterJournalDetails(JournalDetail entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.JournalID == this.JournalID));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._companyID, this._journalID);
        }
    }
    
    /// <summary>
    /// The 'JournalDetail' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/KNBManagement.Web")]
    public sealed partial class JournalDetail : Entity
    {
        
        private EntityRef<Company> _company;
        
        private Guid _companyID;
        
        private Guid _creditItemID;
        
        private decimal _creditMoney;
        
        private Guid _debitItemID;
        
        private decimal _debitMoney;
        
        private EntityRef<Journal> _journal;
        
        private int _journalDetailID;
        
        private Guid _journalID;
        
        private byte[] _ts;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCompanyIDChanging(Guid value);
        partial void OnCompanyIDChanged();
        partial void OnCreditItemIDChanging(Guid value);
        partial void OnCreditItemIDChanged();
        partial void OnCreditMoneyChanging(decimal value);
        partial void OnCreditMoneyChanged();
        partial void OnDebitItemIDChanging(Guid value);
        partial void OnDebitItemIDChanged();
        partial void OnDebitMoneyChanging(decimal value);
        partial void OnDebitMoneyChanged();
        partial void OnJournalDetailIDChanging(int value);
        partial void OnJournalDetailIDChanged();
        partial void OnJournalIDChanging(Guid value);
        partial void OnJournalIDChanged();
        partial void OnTSChanging(byte[] value);
        partial void OnTSChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="JournalDetail"/> class.
        /// </summary>
        public JournalDetail()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_JournalDetail", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.JournalDetails.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(Guid);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.JournalDetails.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Display(Name="CompanyIDLabel", Order=1, ResourceType=typeof(KNBManageDataResources), ShortName="CompanyIDCol")]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public Guid CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreditItemID' value.
        /// </summary>
        [DataMember()]
        public Guid CreditItemID
        {
            get
            {
                return this._creditItemID;
            }
            set
            {
                if ((this._creditItemID != value))
                {
                    this.OnCreditItemIDChanging(value);
                    this.RaiseDataMemberChanging("CreditItemID");
                    this.ValidateProperty("CreditItemID", value);
                    this._creditItemID = value;
                    this.RaiseDataMemberChanged("CreditItemID");
                    this.OnCreditItemIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreditMoney' value.
        /// </summary>
        [DataMember()]
        public decimal CreditMoney
        {
            get
            {
                return this._creditMoney;
            }
            set
            {
                if ((this._creditMoney != value))
                {
                    this.OnCreditMoneyChanging(value);
                    this.RaiseDataMemberChanging("CreditMoney");
                    this.ValidateProperty("CreditMoney", value);
                    this._creditMoney = value;
                    this.RaiseDataMemberChanged("CreditMoney");
                    this.OnCreditMoneyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DebitItemID' value.
        /// </summary>
        [DataMember()]
        public Guid DebitItemID
        {
            get
            {
                return this._debitItemID;
            }
            set
            {
                if ((this._debitItemID != value))
                {
                    this.OnDebitItemIDChanging(value);
                    this.RaiseDataMemberChanging("DebitItemID");
                    this.ValidateProperty("DebitItemID", value);
                    this._debitItemID = value;
                    this.RaiseDataMemberChanged("DebitItemID");
                    this.OnDebitItemIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DebitMoney' value.
        /// </summary>
        [DataMember()]
        public decimal DebitMoney
        {
            get
            {
                return this._debitMoney;
            }
            set
            {
                if ((this._debitMoney != value))
                {
                    this.OnDebitMoneyChanging(value);
                    this.RaiseDataMemberChanging("DebitMoney");
                    this.ValidateProperty("DebitMoney", value);
                    this._debitMoney = value;
                    this.RaiseDataMemberChanged("DebitMoney");
                    this.OnDebitMoneyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Journal"/> entity.
        /// </summary>
        [Association("Journal_JournalDetail", "CompanyID,JournalID", "CompanyID,JournalID", IsForeignKey=true)]
        [XmlIgnore()]
        public Journal Journal
        {
            get
            {
                if ((this._journal == null))
                {
                    this._journal = new EntityRef<Journal>(this, "Journal", this.FilterJournal);
                }
                return this._journal.Entity;
            }
            set
            {
                Journal previous = this.Journal;
                if ((previous != value))
                {
                    this.ValidateProperty("Journal", value);
                    if ((previous != null))
                    {
                        this._journal.Entity = null;
                        previous.JournalDetails.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                        this.JournalID = value.JournalID;
                    }
                    else
                    {
                        this.CompanyID = default(Guid);
                        this.JournalID = default(Guid);
                    }
                    this._journal.Entity = value;
                    if ((value != null))
                    {
                        value.JournalDetails.Add(this);
                    }
                    this.RaisePropertyChanged("Journal");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'JournalDetailID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int JournalDetailID
        {
            get
            {
                return this._journalDetailID;
            }
            set
            {
                if ((this._journalDetailID != value))
                {
                    this.OnJournalDetailIDChanging(value);
                    this.RaiseDataMemberChanging("JournalDetailID");
                    this.ValidateProperty("JournalDetailID", value);
                    this._journalDetailID = value;
                    this.RaiseDataMemberChanged("JournalDetailID");
                    this.OnJournalDetailIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'JournalID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public Guid JournalID
        {
            get
            {
                return this._journalID;
            }
            set
            {
                if ((this._journalID != value))
                {
                    this.OnJournalIDChanging(value);
                    this.RaiseDataMemberChanging("JournalID");
                    this.ValidateProperty("JournalID", value);
                    this._journalID = value;
                    this.RaiseDataMemberChanged("JournalID");
                    this.OnJournalIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TS' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false)]
        [RoundtripOriginal()]
        [Timestamp()]
        public byte[] TS
        {
            get
            {
                return this._ts;
            }
            set
            {
                if ((this._ts != value))
                {
                    this.OnTSChanging(value);
                    this.ValidateProperty("TS", value);
                    this._ts = value;
                    this.RaisePropertyChanged("TS");
                    this.OnTSChanged();
                }
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private bool FilterJournal(Journal entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.JournalID == this.JournalID));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._companyID, this._journalDetailID, this._journalID);
        }
    }
    
    /// <summary>
    /// The 'JournalItemBiz' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/KNBManagement.Web")]
    public sealed partial class JournalItemBiz : Entity
    {
        
        private EntityRef<BusinessType> _businessType;
        
        private Guid _businessTypeID;
        
        private string _journalGroup;
        
        private Guid _journalItemID;
        
        private string _journalName;
        
        private string _keyword;
        
        private byte[] _ts;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBusinessTypeIDChanging(Guid value);
        partial void OnBusinessTypeIDChanged();
        partial void OnJournalGroupChanging(string value);
        partial void OnJournalGroupChanged();
        partial void OnJournalItemIDChanging(Guid value);
        partial void OnJournalItemIDChanged();
        partial void OnJournalNameChanging(string value);
        partial void OnJournalNameChanged();
        partial void OnKeywordChanging(string value);
        partial void OnKeywordChanged();
        partial void OnTSChanging(byte[] value);
        partial void OnTSChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="JournalItemBiz"/> class.
        /// </summary>
        public JournalItemBiz()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="BusinessType"/> entity.
        /// </summary>
        [Association("BusinessType_JournalItemBiz", "BusinessTypeID", "BusinessTypeID", IsForeignKey=true)]
        [XmlIgnore()]
        public BusinessType BusinessType
        {
            get
            {
                if ((this._businessType == null))
                {
                    this._businessType = new EntityRef<BusinessType>(this, "BusinessType", this.FilterBusinessType);
                }
                return this._businessType.Entity;
            }
            set
            {
                BusinessType previous = this.BusinessType;
                if ((previous != value))
                {
                    this.ValidateProperty("BusinessType", value);
                    if ((previous != null))
                    {
                        this._businessType.Entity = null;
                        previous.JournalItemBizs.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.BusinessTypeID = value.BusinessTypeID;
                    }
                    else
                    {
                        this.BusinessTypeID = default(Guid);
                    }
                    this._businessType.Entity = value;
                    if ((value != null))
                    {
                        value.JournalItemBizs.Add(this);
                    }
                    this.RaisePropertyChanged("BusinessType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BusinessTypeID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public Guid BusinessTypeID
        {
            get
            {
                return this._businessTypeID;
            }
            set
            {
                if ((this._businessTypeID != value))
                {
                    this.OnBusinessTypeIDChanging(value);
                    this.RaiseDataMemberChanging("BusinessTypeID");
                    this.ValidateProperty("BusinessTypeID", value);
                    this._businessTypeID = value;
                    this.RaiseDataMemberChanged("BusinessTypeID");
                    this.OnBusinessTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'JournalGroup' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string JournalGroup
        {
            get
            {
                return this._journalGroup;
            }
            set
            {
                if ((this._journalGroup != value))
                {
                    this.OnJournalGroupChanging(value);
                    this.RaiseDataMemberChanging("JournalGroup");
                    this.ValidateProperty("JournalGroup", value);
                    this._journalGroup = value;
                    this.RaiseDataMemberChanged("JournalGroup");
                    this.OnJournalGroupChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'JournalItemID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public Guid JournalItemID
        {
            get
            {
                return this._journalItemID;
            }
            set
            {
                if ((this._journalItemID != value))
                {
                    this.OnJournalItemIDChanging(value);
                    this.RaiseDataMemberChanging("JournalItemID");
                    this.ValidateProperty("JournalItemID", value);
                    this._journalItemID = value;
                    this.RaiseDataMemberChanged("JournalItemID");
                    this.OnJournalItemIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'JournalName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string JournalName
        {
            get
            {
                return this._journalName;
            }
            set
            {
                if ((this._journalName != value))
                {
                    this.OnJournalNameChanging(value);
                    this.RaiseDataMemberChanging("JournalName");
                    this.ValidateProperty("JournalName", value);
                    this._journalName = value;
                    this.RaiseDataMemberChanged("JournalName");
                    this.OnJournalNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Keyword' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Keyword
        {
            get
            {
                return this._keyword;
            }
            set
            {
                if ((this._keyword != value))
                {
                    this.OnKeywordChanging(value);
                    this.RaiseDataMemberChanging("Keyword");
                    this.ValidateProperty("Keyword", value);
                    this._keyword = value;
                    this.RaiseDataMemberChanged("Keyword");
                    this.OnKeywordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TS' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false)]
        [RoundtripOriginal()]
        [Timestamp()]
        public byte[] TS
        {
            get
            {
                return this._ts;
            }
            set
            {
                if ((this._ts != value))
                {
                    this.OnTSChanging(value);
                    this.ValidateProperty("TS", value);
                    this._ts = value;
                    this.RaisePropertyChanged("TS");
                    this.OnTSChanged();
                }
            }
        }
        
        private bool FilterBusinessType(BusinessType entity)
        {
            return (entity.BusinessTypeID == this.BusinessTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._businessTypeID, this._journalItemID);
        }
    }
    
    /// <summary>
    /// The 'JournalItemComp' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/KNBManagement.Web")]
    public sealed partial class JournalItemComp : Entity
    {
        
        private EntityRef<Company> _company;
        
        private Guid _companyID;
        
        private string _journalGroup;
        
        private Guid _journalItemID;
        
        private string _journalName;
        
        private string _keyword;
        
        private byte[] _ts;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCompanyIDChanging(Guid value);
        partial void OnCompanyIDChanged();
        partial void OnJournalGroupChanging(string value);
        partial void OnJournalGroupChanged();
        partial void OnJournalItemIDChanging(Guid value);
        partial void OnJournalItemIDChanged();
        partial void OnJournalNameChanging(string value);
        partial void OnJournalNameChanged();
        partial void OnKeywordChanging(string value);
        partial void OnKeywordChanged();
        partial void OnTSChanging(byte[] value);
        partial void OnTSChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="JournalItemComp"/> class.
        /// </summary>
        public JournalItemComp()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_JournalItemComp", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.JournalItemComps.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(Guid);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.JournalItemComps.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Display(Name="CompanyIDLabel", Order=1, ResourceType=typeof(KNBManageDataResources), ShortName="CompanyIDCol")]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public Guid CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'JournalGroup' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string JournalGroup
        {
            get
            {
                return this._journalGroup;
            }
            set
            {
                if ((this._journalGroup != value))
                {
                    this.OnJournalGroupChanging(value);
                    this.RaiseDataMemberChanging("JournalGroup");
                    this.ValidateProperty("JournalGroup", value);
                    this._journalGroup = value;
                    this.RaiseDataMemberChanged("JournalGroup");
                    this.OnJournalGroupChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'JournalItemID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public Guid JournalItemID
        {
            get
            {
                return this._journalItemID;
            }
            set
            {
                if ((this._journalItemID != value))
                {
                    this.OnJournalItemIDChanging(value);
                    this.RaiseDataMemberChanging("JournalItemID");
                    this.ValidateProperty("JournalItemID", value);
                    this._journalItemID = value;
                    this.RaiseDataMemberChanged("JournalItemID");
                    this.OnJournalItemIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'JournalName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string JournalName
        {
            get
            {
                return this._journalName;
            }
            set
            {
                if ((this._journalName != value))
                {
                    this.OnJournalNameChanging(value);
                    this.RaiseDataMemberChanging("JournalName");
                    this.ValidateProperty("JournalName", value);
                    this._journalName = value;
                    this.RaiseDataMemberChanged("JournalName");
                    this.OnJournalNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Keyword' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Keyword
        {
            get
            {
                return this._keyword;
            }
            set
            {
                if ((this._keyword != value))
                {
                    this.OnKeywordChanging(value);
                    this.RaiseDataMemberChanging("Keyword");
                    this.ValidateProperty("Keyword", value);
                    this._keyword = value;
                    this.RaiseDataMemberChanged("Keyword");
                    this.OnKeywordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TS' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false)]
        [RoundtripOriginal()]
        [Timestamp()]
        public byte[] TS
        {
            get
            {
                return this._ts;
            }
            set
            {
                if ((this._ts != value))
                {
                    this.OnTSChanging(value);
                    this.ValidateProperty("TS", value);
                    this._ts = value;
                    this.RaisePropertyChanged("TS");
                    this.OnTSChanged();
                }
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._companyID, this._journalItemID);
        }
    }
    
    /// <summary>
    /// The 'RegistrationData' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/KNBManagement.Web")]
    public sealed partial class RegistrationData : Entity
    {
        
        private string _answer;
        
        private string _email;
        
        private string _friendlyName;
        
        private string _question;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationData"/> class.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Answer' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this.ValidateProperty("Answer", value);
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [RoundtripOriginal()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaisePropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Question' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RegularExpression("^[a-zA-Z0-9_]*$", ErrorMessageResourceName="ValidationErrorInvalidUserName", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [RoundtripOriginal()]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadUserNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=4)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaisePropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._email == null) 
                        || (this._userName == null)))
            {
                return null;
            }
            return EntityKey.Create(this._email, this._userName);
        }
    }
    
    /// <summary>
    /// The 'Slip' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/KNBManagement.Web")]
    public sealed partial class Slip : Entity
    {
        
        private EntityRef<Company> _company;
        
        private Guid _companyID;
        
        private Guid _journalItemID;
        
        private string _remarks;
        
        private EntityCollection<SlipDetail> _slipDetails;
        
        private Guid _slipID;
        
        private EntityRef<SlipType> _slipType;
        
        private int _slipTypeID;
        
        private DateTime _tradingDate;
        
        private byte[] _ts;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCompanyIDChanging(Guid value);
        partial void OnCompanyIDChanged();
        partial void OnJournalItemIDChanging(Guid value);
        partial void OnJournalItemIDChanged();
        partial void OnRemarksChanging(string value);
        partial void OnRemarksChanged();
        partial void OnSlipIDChanging(Guid value);
        partial void OnSlipIDChanged();
        partial void OnSlipTypeIDChanging(int value);
        partial void OnSlipTypeIDChanged();
        partial void OnTradingDateChanging(DateTime value);
        partial void OnTradingDateChanged();
        partial void OnTSChanging(byte[] value);
        partial void OnTSChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Slip"/> class.
        /// </summary>
        public Slip()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_Slip", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.Slips.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(Guid);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.Slips.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Display(Name="CompanyIDLabel", Order=1, ResourceType=typeof(KNBManageDataResources), ShortName="CompanyIDCol")]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public Guid CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'JournalItemID' value.
        /// </summary>
        [DataMember()]
        [Display(Name="JournalItemIDLabel", Order=4, ResourceType=typeof(KNBManageDataResources), ShortName="JournalDetailIDCol")]
        [Required()]
        public Guid JournalItemID
        {
            get
            {
                return this._journalItemID;
            }
            set
            {
                if ((this._journalItemID != value))
                {
                    this.OnJournalItemIDChanging(value);
                    this.RaiseDataMemberChanging("JournalItemID");
                    this.ValidateProperty("JournalItemID", value);
                    this._journalItemID = value;
                    this.RaiseDataMemberChanged("JournalItemID");
                    this.OnJournalItemIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Remarks' value.
        /// </summary>
        [DataMember()]
        [Display(Name="RemarksLabel", Order=5, ResourceType=typeof(KNBManageDataResources), ShortName="RemarksCol")]
        [Required()]
        [StringLength(50)]
        public string Remarks
        {
            get
            {
                return this._remarks;
            }
            set
            {
                if ((this._remarks != value))
                {
                    this.OnRemarksChanging(value);
                    this.RaiseDataMemberChanging("Remarks");
                    this.ValidateProperty("Remarks", value);
                    this._remarks = value;
                    this.RaiseDataMemberChanged("Remarks");
                    this.OnRemarksChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SlipDetail"/> entities.
        /// </summary>
        [Association("Slip_SlipDetail", "CompanyID,SlipID", "CompanyID,SlipID")]
        [XmlIgnore()]
        public EntityCollection<SlipDetail> SlipDetails
        {
            get
            {
                if ((this._slipDetails == null))
                {
                    this._slipDetails = new EntityCollection<SlipDetail>(this, "SlipDetails", this.FilterSlipDetails, this.AttachSlipDetails, this.DetachSlipDetails);
                }
                return this._slipDetails;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SlipID' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SlipIDLabel", Order=2, ResourceType=typeof(KNBManageDataResources), ShortName="SlipIDCol")]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public Guid SlipID
        {
            get
            {
                return this._slipID;
            }
            set
            {
                if ((this._slipID != value))
                {
                    this.OnSlipIDChanging(value);
                    this.RaiseDataMemberChanging("SlipID");
                    this.ValidateProperty("SlipID", value);
                    this._slipID = value;
                    this.RaiseDataMemberChanged("SlipID");
                    this.OnSlipIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SlipType"/> entity.
        /// </summary>
        [Association("SlipType_Slip", "SlipTypeID", "SlipTypeID", IsForeignKey=true)]
        [XmlIgnore()]
        public SlipType SlipType
        {
            get
            {
                if ((this._slipType == null))
                {
                    this._slipType = new EntityRef<SlipType>(this, "SlipType", this.FilterSlipType);
                }
                return this._slipType.Entity;
            }
            set
            {
                SlipType previous = this.SlipType;
                if ((previous != value))
                {
                    this.ValidateProperty("SlipType", value);
                    if ((previous != null))
                    {
                        this._slipType.Entity = null;
                        previous.Slips.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SlipTypeID = value.SlipTypeID;
                    }
                    else
                    {
                        this.SlipTypeID = default(int);
                    }
                    this._slipType.Entity = value;
                    if ((value != null))
                    {
                        value.Slips.Add(this);
                    }
                    this.RaisePropertyChanged("SlipType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SlipTypeID' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SlipTypeIDLabel", Order=3, ResourceType=typeof(KNBManageDataResources), ShortName="SlipTypeIDCol")]
        [Required()]
        [RoundtripOriginal()]
        public int SlipTypeID
        {
            get
            {
                return this._slipTypeID;
            }
            set
            {
                if ((this._slipTypeID != value))
                {
                    this.OnSlipTypeIDChanging(value);
                    this.RaiseDataMemberChanging("SlipTypeID");
                    this.ValidateProperty("SlipTypeID", value);
                    this._slipTypeID = value;
                    this.RaiseDataMemberChanged("SlipTypeID");
                    this.OnSlipTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TradingDate' value.
        /// </summary>
        [DataMember()]
        [Display(Name="TradingDateLabel", Order=3, ResourceType=typeof(KNBManageDataResources), ShortName="TradingDateCol")]
        [Required()]
        public DateTime TradingDate
        {
            get
            {
                return this._tradingDate;
            }
            set
            {
                if ((this._tradingDate != value))
                {
                    this.OnTradingDateChanging(value);
                    this.RaiseDataMemberChanging("TradingDate");
                    this.ValidateProperty("TradingDate", value);
                    this._tradingDate = value;
                    this.RaiseDataMemberChanged("TradingDate");
                    this.OnTradingDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TS' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false)]
        [RoundtripOriginal()]
        [Timestamp()]
        public byte[] TS
        {
            get
            {
                return this._ts;
            }
            set
            {
                if ((this._ts != value))
                {
                    this.OnTSChanging(value);
                    this.ValidateProperty("TS", value);
                    this._ts = value;
                    this.RaisePropertyChanged("TS");
                    this.OnTSChanged();
                }
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachSlipDetails(SlipDetail entity)
        {
            entity.Slip = this;
        }
        
        private void DetachSlipDetails(SlipDetail entity)
        {
            entity.Slip = null;
        }
        
        private bool FilterSlipDetails(SlipDetail entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.SlipID == this.SlipID));
        }
        
        private bool FilterSlipType(SlipType entity)
        {
            return (entity.SlipTypeID == this.SlipTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._companyID, this._slipID);
        }
    }
    
    /// <summary>
    /// The 'SlipDetail' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/KNBManagement.Web")]
    public sealed partial class SlipDetail : Entity
    {
        
        private Guid _companyID;
        
        private int _detailOrder;
        
        private Guid _journalItemID;
        
        private decimal _journalMoney;
        
        private EntityRef<Slip> _slip;
        
        private Guid _slipDetailID;
        
        private Guid _slipID;
        
        private byte[] _ts;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCompanyIDChanging(Guid value);
        partial void OnCompanyIDChanged();
        partial void OnDetailOrderChanging(int value);
        partial void OnDetailOrderChanged();
        partial void OnJournalItemIDChanging(Guid value);
        partial void OnJournalItemIDChanged();
        partial void OnJournalMoneyChanging(decimal value);
        partial void OnJournalMoneyChanged();
        partial void OnSlipDetailIDChanging(Guid value);
        partial void OnSlipDetailIDChanged();
        partial void OnSlipIDChanging(Guid value);
        partial void OnSlipIDChanged();
        partial void OnTSChanging(byte[] value);
        partial void OnTSChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SlipDetail"/> class.
        /// </summary>
        public SlipDetail()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Display(Name="CompanyIDLabel", Order=1, ResourceType=typeof(KNBManageDataResources), ShortName="CompanyIDCol")]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public Guid CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DetailOrder' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SlipDetailOrderLabel", Order=6, ResourceType=typeof(KNBManageDataResources), ShortName="SlipDetailOrderCol")]
        [Required()]
        public int DetailOrder
        {
            get
            {
                return this._detailOrder;
            }
            set
            {
                if ((this._detailOrder != value))
                {
                    this.OnDetailOrderChanging(value);
                    this.RaiseDataMemberChanging("DetailOrder");
                    this.ValidateProperty("DetailOrder", value);
                    this._detailOrder = value;
                    this.RaiseDataMemberChanged("DetailOrder");
                    this.OnDetailOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'JournalItemID' value.
        /// </summary>
        [DataMember()]
        [Display(Name="JournalItemIDLabel", Order=4, ResourceType=typeof(KNBManageDataResources), ShortName="JournalDetailIDCol")]
        [Required(ErrorMessage="仕訳項目は必須です")]
        public Guid JournalItemID
        {
            get
            {
                return this._journalItemID;
            }
            set
            {
                if ((this._journalItemID != value))
                {
                    this.OnJournalItemIDChanging(value);
                    this.RaiseDataMemberChanging("JournalItemID");
                    this.ValidateProperty("JournalItemID", value);
                    this._journalItemID = value;
                    this.RaiseDataMemberChanged("JournalItemID");
                    this.OnJournalItemIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'JournalMoney' value.
        /// </summary>
        [DataMember()]
        [Display(Name="JournalMoneyLabel", Order=5, ResourceType=typeof(KNBManageDataResources), ShortName="JournalMoneyCol")]
        [Required()]
        public decimal JournalMoney
        {
            get
            {
                return this._journalMoney;
            }
            set
            {
                if ((this._journalMoney != value))
                {
                    this.OnJournalMoneyChanging(value);
                    this.RaiseDataMemberChanging("JournalMoney");
                    this.ValidateProperty("JournalMoney", value);
                    this._journalMoney = value;
                    this.RaiseDataMemberChanged("JournalMoney");
                    this.OnJournalMoneyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Slip"/> entity.
        /// </summary>
        [Association("Slip_SlipDetail", "CompanyID,SlipID", "CompanyID,SlipID", IsForeignKey=true)]
        [XmlIgnore()]
        public Slip Slip
        {
            get
            {
                if ((this._slip == null))
                {
                    this._slip = new EntityRef<Slip>(this, "Slip", this.FilterSlip);
                }
                return this._slip.Entity;
            }
            set
            {
                Slip previous = this.Slip;
                if ((previous != value))
                {
                    this.ValidateProperty("Slip", value);
                    if ((previous != null))
                    {
                        this._slip.Entity = null;
                        previous.SlipDetails.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                        this.SlipID = value.SlipID;
                    }
                    else
                    {
                        this.CompanyID = default(Guid);
                        this.SlipID = default(Guid);
                    }
                    this._slip.Entity = value;
                    if ((value != null))
                    {
                        value.SlipDetails.Add(this);
                    }
                    this.RaisePropertyChanged("Slip");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SlipDetailID' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SlipDetailIDLabel", Order=3, ResourceType=typeof(KNBManageDataResources), ShortName="SlipDetailIDCol")]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public Guid SlipDetailID
        {
            get
            {
                return this._slipDetailID;
            }
            set
            {
                if ((this._slipDetailID != value))
                {
                    this.OnSlipDetailIDChanging(value);
                    this.RaiseDataMemberChanging("SlipDetailID");
                    this.ValidateProperty("SlipDetailID", value);
                    this._slipDetailID = value;
                    this.RaiseDataMemberChanged("SlipDetailID");
                    this.OnSlipDetailIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SlipID' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SlipIDLabel", Order=2, ResourceType=typeof(KNBManageDataResources), ShortName="SlipIDCol")]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public Guid SlipID
        {
            get
            {
                return this._slipID;
            }
            set
            {
                if ((this._slipID != value))
                {
                    this.OnSlipIDChanging(value);
                    this.RaiseDataMemberChanging("SlipID");
                    this.ValidateProperty("SlipID", value);
                    this._slipID = value;
                    this.RaiseDataMemberChanged("SlipID");
                    this.OnSlipIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TS' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false)]
        [RoundtripOriginal()]
        [Timestamp()]
        public byte[] TS
        {
            get
            {
                return this._ts;
            }
            set
            {
                if ((this._ts != value))
                {
                    this.OnTSChanging(value);
                    this.ValidateProperty("TS", value);
                    this._ts = value;
                    this.RaisePropertyChanged("TS");
                    this.OnTSChanged();
                }
            }
        }
        
        private bool FilterSlip(Slip entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.SlipID == this.SlipID));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._companyID, this._slipDetailID, this._slipID);
        }
    }
    
    /// <summary>
    /// The 'SlipType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/KNBManagement.Web")]
    public sealed partial class SlipType : Entity
    {
        
        private string _name;
        
        private EntityCollection<Slip> _slips;
        
        private int _slipTypeID;
        
        private byte[] _ts;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnSlipTypeIDChanging(int value);
        partial void OnSlipTypeIDChanged();
        partial void OnTSChanging(byte[] value);
        partial void OnTSChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SlipType"/> class.
        /// </summary>
        public SlipType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SlipNameLabel", Order=2, ResourceType=typeof(KNBManageDataResources), ShortName="SlipNameCol")]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Slip"/> entities.
        /// </summary>
        [Association("SlipType_Slip", "SlipTypeID", "SlipTypeID")]
        [XmlIgnore()]
        public EntityCollection<Slip> Slips
        {
            get
            {
                if ((this._slips == null))
                {
                    this._slips = new EntityCollection<Slip>(this, "Slips", this.FilterSlips, this.AttachSlips, this.DetachSlips);
                }
                return this._slips;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SlipTypeID' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SlipTypeIDLabel", Order=1, ResourceType=typeof(KNBManageDataResources), ShortName="SlipTypeIDCol")]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        public int SlipTypeID
        {
            get
            {
                return this._slipTypeID;
            }
            set
            {
                if ((this._slipTypeID != value))
                {
                    this.OnSlipTypeIDChanging(value);
                    this.ValidateProperty("SlipTypeID", value);
                    this._slipTypeID = value;
                    this.RaisePropertyChanged("SlipTypeID");
                    this.OnSlipTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TS' value.
        /// </summary>
        [ConcurrencyCheck()]
        [DataMember()]
        [Editable(false)]
        [RoundtripOriginal()]
        [Timestamp()]
        public byte[] TS
        {
            get
            {
                return this._ts;
            }
            set
            {
                if ((this._ts != value))
                {
                    this.OnTSChanging(value);
                    this.ValidateProperty("TS", value);
                    this._ts = value;
                    this.RaisePropertyChanged("TS");
                    this.OnTSChanged();
                }
            }
        }
        
        private void AttachSlips(Slip entity)
        {
            entity.SlipType = this;
        }
        
        private void DetachSlips(Slip entity)
        {
            entity.SlipType = null;
        }
        
        private bool FilterSlips(Slip entity)
        {
            return (entity.SlipTypeID == this.SlipTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._slipTypeID;
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/KNBManagement.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _friendlyName;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'UserRegistrationService' domain service.
    /// </summary>
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("KNBManagement-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The UserRegistrationService service URI.</param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="RegistrationData"/> entities that have been loaded into this <see cref="UserRegistrationContext"/> instance.
        /// </summary>
        public EntitySet<RegistrationData> RegistrationDatas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RegistrationData>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RegistrationData"/> entities using the 'GetUsers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RegistrationData"/> entities.</returns>
        public EntityQuery<RegistrationData> GetUsersQuery()
        {
            this.ValidateMethod("GetUsersQuery", null);
            return base.CreateQuery<RegistrationData>("GetUsers", null, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the domain service.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, string password, Action<InvokeOperation<CreateUserStatus>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the domain service.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'UserRegistrationService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CreateUser' operation.
            /// </summary>
            /// <param name="user">The value for the 'user' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction="http://tempuri.org/UserRegistrationService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCreateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCreateUser'.</param>
            /// <returns>The 'CreateUserStatus' returned from the 'CreateUser' operation.</returns>
            CreateUserStatus EndCreateUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUsers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/GetUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/GetUsers", ReplyAction="http://tempuri.org/UserRegistrationService/GetUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUsers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUsers' operation.</returns>
            QueryResult<RegistrationData> EndGetUsers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/SubmitChanges", ReplyAction="http://tempuri.org/UserRegistrationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
                this.CreateEntitySet<RegistrationData>(EntitySetOperations.None);
            }
        }
    }
}
namespace KNBManagement.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using KNBManagement.Web;
    
    
    /// <summary>
    /// The domain context corresponding to the 'KN_BManageService' domain service.
    /// </summary>
    public sealed partial class KN_BManageContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="KN_BManageContext"/> class.
        /// </summary>
        public KN_BManageContext() : 
                this(new WebDomainClient<IKN_BManageServiceContract>(new Uri("KNBManagement-Web-Services-KN_BManageService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="KN_BManageContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The KN_BManageService service URI.</param>
        public KN_BManageContext(Uri serviceUri) : 
                this(new WebDomainClient<IKN_BManageServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="KN_BManageContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public KN_BManageContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="BusinessType"/> entities that have been loaded into this <see cref="KN_BManageContext"/> instance.
        /// </summary>
        public EntitySet<BusinessType> BusinessTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<BusinessType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Company"/> entities that have been loaded into this <see cref="KN_BManageContext"/> instance.
        /// </summary>
        public EntitySet<Company> Companies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Company>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Employee"/> entities that have been loaded into this <see cref="KN_BManageContext"/> instance.
        /// </summary>
        public EntitySet<Employee> Employees
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Employee>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Journal"/> entities that have been loaded into this <see cref="KN_BManageContext"/> instance.
        /// </summary>
        public EntitySet<Journal> Journals
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Journal>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="JournalDetail"/> entities that have been loaded into this <see cref="KN_BManageContext"/> instance.
        /// </summary>
        public EntitySet<JournalDetail> JournalDetails
        {
            get
            {
                return base.EntityContainer.GetEntitySet<JournalDetail>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="JournalItemBiz"/> entities that have been loaded into this <see cref="KN_BManageContext"/> instance.
        /// </summary>
        public EntitySet<JournalItemBiz> JournalItemBizs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<JournalItemBiz>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="JournalItemComp"/> entities that have been loaded into this <see cref="KN_BManageContext"/> instance.
        /// </summary>
        public EntitySet<JournalItemComp> JournalItemComps
        {
            get
            {
                return base.EntityContainer.GetEntitySet<JournalItemComp>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SlipDetail"/> entities that have been loaded into this <see cref="KN_BManageContext"/> instance.
        /// </summary>
        public EntitySet<SlipDetail> SlipDetails
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SlipDetail>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Slip"/> entities that have been loaded into this <see cref="KN_BManageContext"/> instance.
        /// </summary>
        public EntitySet<Slip> Slips
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Slip>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SlipType"/> entities that have been loaded into this <see cref="KN_BManageContext"/> instance.
        /// </summary>
        public EntitySet<SlipType> SlipTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SlipType>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="BusinessType"/> entities using the 'GetBusinessTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="BusinessType"/> entities.</returns>
        public EntityQuery<BusinessType> GetBusinessTypesQuery()
        {
            this.ValidateMethod("GetBusinessTypesQuery", null);
            return base.CreateQuery<BusinessType>("GetBusinessTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="BusinessType"/> entities using the 'GetBusinessTypesByBusinessTypeID' query.
        /// </summary>
        /// <param name="businessTypeID">The value for the 'businessTypeID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="BusinessType"/> entities.</returns>
        public EntityQuery<BusinessType> GetBusinessTypesByBusinessTypeIDQuery(Guid businessTypeID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("businessTypeID", businessTypeID);
            this.ValidateMethod("GetBusinessTypesByBusinessTypeIDQuery", parameters);
            return base.CreateQuery<BusinessType>("GetBusinessTypesByBusinessTypeID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Company"/> entities using the 'GetCompanies' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Company"/> entities.</returns>
        public EntityQuery<Company> GetCompaniesQuery()
        {
            this.ValidateMethod("GetCompaniesQuery", null);
            return base.CreateQuery<Company>("GetCompanies", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Employee"/> entities using the 'GetEmployees' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Employee"/> entities.</returns>
        public EntityQuery<Employee> GetEmployeesQuery()
        {
            this.ValidateMethod("GetEmployeesQuery", null);
            return base.CreateQuery<Employee>("GetEmployees", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Employee"/> entities using the 'GetEmployeesByCompanyID' query.
        /// </summary>
        /// <param name="companyID">The value for the 'companyID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Employee"/> entities.</returns>
        public EntityQuery<Employee> GetEmployeesByCompanyIDQuery(Guid companyID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("companyID", companyID);
            this.ValidateMethod("GetEmployeesByCompanyIDQuery", parameters);
            return base.CreateQuery<Employee>("GetEmployeesByCompanyID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Journal"/> entities using the 'GetJournal' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Journal"/> entities.</returns>
        public EntityQuery<Journal> GetJournalQuery()
        {
            this.ValidateMethod("GetJournalQuery", null);
            return base.CreateQuery<Journal>("GetJournal", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="JournalDetail"/> entities using the 'GetJournalDetail' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="JournalDetail"/> entities.</returns>
        public EntityQuery<JournalDetail> GetJournalDetailQuery()
        {
            this.ValidateMethod("GetJournalDetailQuery", null);
            return base.CreateQuery<JournalDetail>("GetJournalDetail", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="JournalItemBiz"/> entities using the 'GetJournalItemBizs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="JournalItemBiz"/> entities.</returns>
        public EntityQuery<JournalItemBiz> GetJournalItemBizsQuery()
        {
            this.ValidateMethod("GetJournalItemBizsQuery", null);
            return base.CreateQuery<JournalItemBiz>("GetJournalItemBizs", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="JournalItemBiz"/> entities using the 'GetJournalItemBizsByBusinessTypeID' query.
        /// </summary>
        /// <param name="businessTypeID">The value for the 'businessTypeID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="JournalItemBiz"/> entities.</returns>
        public EntityQuery<JournalItemBiz> GetJournalItemBizsByBusinessTypeIDQuery(Guid businessTypeID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("businessTypeID", businessTypeID);
            this.ValidateMethod("GetJournalItemBizsByBusinessTypeIDQuery", parameters);
            return base.CreateQuery<JournalItemBiz>("GetJournalItemBizsByBusinessTypeID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="JournalItemBiz"/> entities using the 'GetJournalItemBizsByBusinessTypeIDForListDisplay' query.
        /// </summary>
        /// <param name="businessTypeID">The value for the 'businessTypeID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="JournalItemBiz"/> entities.</returns>
        public EntityQuery<JournalItemBiz> GetJournalItemBizsByBusinessTypeIDForListDisplayQuery(Guid businessTypeID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("businessTypeID", businessTypeID);
            this.ValidateMethod("GetJournalItemBizsByBusinessTypeIDForListDisplayQuery", parameters);
            return base.CreateQuery<JournalItemBiz>("GetJournalItemBizsByBusinessTypeIDForListDisplay", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="JournalItemComp"/> entities using the 'GetJournalItemComps' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="JournalItemComp"/> entities.</returns>
        public EntityQuery<JournalItemComp> GetJournalItemCompsQuery()
        {
            this.ValidateMethod("GetJournalItemCompsQuery", null);
            return base.CreateQuery<JournalItemComp>("GetJournalItemComps", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SlipDetail"/> entities using the 'GetSlipDetails' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SlipDetail"/> entities.</returns>
        public EntityQuery<SlipDetail> GetSlipDetailsQuery()
        {
            this.ValidateMethod("GetSlipDetailsQuery", null);
            return base.CreateQuery<SlipDetail>("GetSlipDetails", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SlipDetail"/> entities using the 'GetSlipDetailsByCompanyIDSlipID' query.
        /// </summary>
        /// <param name="companyID">The value for the 'companyID' parameter of the query.</param>
        /// <param name="slipID">The value for the 'slipID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SlipDetail"/> entities.</returns>
        public EntityQuery<SlipDetail> GetSlipDetailsByCompanyIDSlipIDQuery(Guid companyID, Guid slipID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("companyID", companyID);
            parameters.Add("slipID", slipID);
            this.ValidateMethod("GetSlipDetailsByCompanyIDSlipIDQuery", parameters);
            return base.CreateQuery<SlipDetail>("GetSlipDetailsByCompanyIDSlipID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SlipDetail"/> entities using the 'GetSlipDetailsByCompanyIDSlipIDDefault' query.
        /// </summary>
        /// <param name="companyID">The value for the 'companyID' parameter of the query.</param>
        /// <param name="slipID">The value for the 'slipID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SlipDetail"/> entities.</returns>
        public EntityQuery<SlipDetail> GetSlipDetailsByCompanyIDSlipIDDefaultQuery(Guid companyID, Guid slipID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("companyID", companyID);
            parameters.Add("slipID", slipID);
            this.ValidateMethod("GetSlipDetailsByCompanyIDSlipIDDefaultQuery", parameters);
            return base.CreateQuery<SlipDetail>("GetSlipDetailsByCompanyIDSlipIDDefault", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Slip"/> entities using the 'GetSlips' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Slip"/> entities.</returns>
        public EntityQuery<Slip> GetSlipsQuery()
        {
            this.ValidateMethod("GetSlipsQuery", null);
            return base.CreateQuery<Slip>("GetSlips", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Slip"/> entities using the 'GetSlipsByCompanyIDTradingFromTo' query.
        /// </summary>
        /// <param name="companyID">The value for the 'companyID' parameter of the query.</param>
        /// <param name="from">The value for the 'from' parameter of the query.</param>
        /// <param name="to">The value for the 'to' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Slip"/> entities.</returns>
        public EntityQuery<Slip> GetSlipsByCompanyIDTradingFromToQuery(Guid companyID, DateTime from, DateTime to)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("companyID", companyID);
            parameters.Add("from", from);
            parameters.Add("to", to);
            this.ValidateMethod("GetSlipsByCompanyIDTradingFromToQuery", parameters);
            return base.CreateQuery<Slip>("GetSlipsByCompanyIDTradingFromTo", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Slip"/> entities using the 'GetSlipsByCompanyIDTradingMonthry' query.
        /// </summary>
        /// <param name="companyID">The value for the 'companyID' parameter of the query.</param>
        /// <param name="monthry">The value for the 'monthry' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Slip"/> entities.</returns>
        public EntityQuery<Slip> GetSlipsByCompanyIDTradingMonthryQuery(Guid companyID, DateTime monthry)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("companyID", companyID);
            parameters.Add("monthry", monthry);
            this.ValidateMethod("GetSlipsByCompanyIDTradingMonthryQuery", parameters);
            return base.CreateQuery<Slip>("GetSlipsByCompanyIDTradingMonthry", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SlipType"/> entities using the 'GetSlipTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SlipType"/> entities.</returns>
        public EntityQuery<SlipType> GetSlipTypesQuery()
        {
            this.ValidateMethod("GetSlipTypesQuery", null);
            return base.CreateQuery<SlipType>("GetSlipTypes", null, false, true);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new KN_BManageContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'KN_BManageService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IKN_BManageServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetBusinessTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/KN_BManageService/GetBusinessTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/KN_BManageService/GetBusinessTypes", ReplyAction="http://tempuri.org/KN_BManageService/GetBusinessTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetBusinessTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBusinessTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBusinessTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetBusinessTypes' operation.</returns>
            QueryResult<BusinessType> EndGetBusinessTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetBusinessTypesByBusinessTypeID' operation.
            /// </summary>
            /// <param name="businessTypeID">The value for the 'businessTypeID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/KN_BManageService/GetBusinessTypesByBusinessTypeIDDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/KN_BManageService/GetBusinessTypesByBusinessTypeID", ReplyAction="http://tempuri.org/KN_BManageService/GetBusinessTypesByBusinessTypeIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetBusinessTypesByBusinessTypeID(Guid businessTypeID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBusinessTypesByBusinessTypeID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBusinessTypesByBusinessTypeID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetBusinessTypesByBusinessTypeID' operation.</returns>
            QueryResult<BusinessType> EndGetBusinessTypesByBusinessTypeID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompanies' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/KN_BManageService/GetCompaniesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/KN_BManageService/GetCompanies", ReplyAction="http://tempuri.org/KN_BManageService/GetCompaniesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCompanies(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompanies'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompanies'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCompanies' operation.</returns>
            QueryResult<Company> EndGetCompanies(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEmployees' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/KN_BManageService/GetEmployeesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/KN_BManageService/GetEmployees", ReplyAction="http://tempuri.org/KN_BManageService/GetEmployeesResponse")]
            [WebGet()]
            IAsyncResult BeginGetEmployees(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEmployees'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEmployees'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEmployees' operation.</returns>
            QueryResult<Employee> EndGetEmployees(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEmployeesByCompanyID' operation.
            /// </summary>
            /// <param name="companyID">The value for the 'companyID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/KN_BManageService/GetEmployeesByCompanyIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/KN_BManageService/GetEmployeesByCompanyID", ReplyAction="http://tempuri.org/KN_BManageService/GetEmployeesByCompanyIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetEmployeesByCompanyID(Guid companyID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEmployeesByCompanyID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEmployeesByCompanyID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEmployeesByCompanyID' operation.</returns>
            QueryResult<Employee> EndGetEmployeesByCompanyID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetJournal' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/KN_BManageService/GetJournalDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/KN_BManageService/GetJournal", ReplyAction="http://tempuri.org/KN_BManageService/GetJournalResponse")]
            [WebGet()]
            IAsyncResult BeginGetJournal(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetJournal'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetJournal'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetJournal' operation.</returns>
            QueryResult<Journal> EndGetJournal(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetJournalDetail' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/KN_BManageService/GetJournalDetailDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/KN_BManageService/GetJournalDetail", ReplyAction="http://tempuri.org/KN_BManageService/GetJournalDetailResponse")]
            [WebGet()]
            IAsyncResult BeginGetJournalDetail(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetJournalDetail'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetJournalDetail'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetJournalDetail' operation.</returns>
            QueryResult<JournalDetail> EndGetJournalDetail(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetJournalItemBizs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/KN_BManageService/GetJournalItemBizsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/KN_BManageService/GetJournalItemBizs", ReplyAction="http://tempuri.org/KN_BManageService/GetJournalItemBizsResponse")]
            [WebGet()]
            IAsyncResult BeginGetJournalItemBizs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetJournalItemBizs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetJournalItemBizs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetJournalItemBizs' operation.</returns>
            QueryResult<JournalItemBiz> EndGetJournalItemBizs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetJournalItemBizsByBusinessTypeID' operation.
            /// </summary>
            /// <param name="businessTypeID">The value for the 'businessTypeID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/KN_BManageService/GetJournalItemBizsByBusinessTypeIDDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/KN_BManageService/GetJournalItemBizsByBusinessTypeID", ReplyAction="http://tempuri.org/KN_BManageService/GetJournalItemBizsByBusinessTypeIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetJournalItemBizsByBusinessTypeID(Guid businessTypeID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetJournalItemBizsByBusinessTypeID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetJournalItemBizsByBusinessTypeID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetJournalItemBizsByBusinessTypeID' operation.</returns>
            QueryResult<JournalItemBiz> EndGetJournalItemBizsByBusinessTypeID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetJournalItemBizsByBusinessTypeIDForListDisplay' operation.
            /// </summary>
            /// <param name="businessTypeID">The value for the 'businessTypeID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/KN_BManageService/GetJournalItemBizsByBusinessTypeIDForListDis" +
                "playDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/KN_BManageService/GetJournalItemBizsByBusinessTypeIDForListDis" +
                "play", ReplyAction="http://tempuri.org/KN_BManageService/GetJournalItemBizsByBusinessTypeIDForListDis" +
                "playResponse")]
            [WebGet()]
            IAsyncResult BeginGetJournalItemBizsByBusinessTypeIDForListDisplay(Guid businessTypeID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetJournalItemBizsByBusinessTypeIDForListDisplay'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetJournalItemBizsByBusinessTypeIDForListDisplay'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetJournalItemBizsByBusinessTypeIDForListDisplay' operation.</returns>
            QueryResult<JournalItemBiz> EndGetJournalItemBizsByBusinessTypeIDForListDisplay(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetJournalItemComps' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/KN_BManageService/GetJournalItemCompsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/KN_BManageService/GetJournalItemComps", ReplyAction="http://tempuri.org/KN_BManageService/GetJournalItemCompsResponse")]
            [WebGet()]
            IAsyncResult BeginGetJournalItemComps(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetJournalItemComps'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetJournalItemComps'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetJournalItemComps' operation.</returns>
            QueryResult<JournalItemComp> EndGetJournalItemComps(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSlipDetails' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/KN_BManageService/GetSlipDetailsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/KN_BManageService/GetSlipDetails", ReplyAction="http://tempuri.org/KN_BManageService/GetSlipDetailsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSlipDetails(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSlipDetails'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSlipDetails'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSlipDetails' operation.</returns>
            QueryResult<SlipDetail> EndGetSlipDetails(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSlipDetailsByCompanyIDSlipID' operation.
            /// </summary>
            /// <param name="companyID">The value for the 'companyID' parameter of this action.</param>
            /// <param name="slipID">The value for the 'slipID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/KN_BManageService/GetSlipDetailsByCompanyIDSlipIDDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/KN_BManageService/GetSlipDetailsByCompanyIDSlipID", ReplyAction="http://tempuri.org/KN_BManageService/GetSlipDetailsByCompanyIDSlipIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetSlipDetailsByCompanyIDSlipID(Guid companyID, Guid slipID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSlipDetailsByCompanyIDSlipID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSlipDetailsByCompanyIDSlipID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSlipDetailsByCompanyIDSlipID' operation.</returns>
            QueryResult<SlipDetail> EndGetSlipDetailsByCompanyIDSlipID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSlipDetailsByCompanyIDSlipIDDefault' operation.
            /// </summary>
            /// <param name="companyID">The value for the 'companyID' parameter of this action.</param>
            /// <param name="slipID">The value for the 'slipID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/KN_BManageService/GetSlipDetailsByCompanyIDSlipIDDefaultDomain" +
                "ServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/KN_BManageService/GetSlipDetailsByCompanyIDSlipIDDefault", ReplyAction="http://tempuri.org/KN_BManageService/GetSlipDetailsByCompanyIDSlipIDDefaultRespon" +
                "se")]
            [WebGet()]
            IAsyncResult BeginGetSlipDetailsByCompanyIDSlipIDDefault(Guid companyID, Guid slipID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSlipDetailsByCompanyIDSlipIDDefault'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSlipDetailsByCompanyIDSlipIDDefault'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSlipDetailsByCompanyIDSlipIDDefault' operation.</returns>
            QueryResult<SlipDetail> EndGetSlipDetailsByCompanyIDSlipIDDefault(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSlips' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/KN_BManageService/GetSlipsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/KN_BManageService/GetSlips", ReplyAction="http://tempuri.org/KN_BManageService/GetSlipsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSlips(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSlips'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSlips'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSlips' operation.</returns>
            QueryResult<Slip> EndGetSlips(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSlipsByCompanyIDTradingFromTo' operation.
            /// </summary>
            /// <param name="companyID">The value for the 'companyID' parameter of this action.</param>
            /// <param name="from">The value for the 'from' parameter of this action.</param>
            /// <param name="to">The value for the 'to' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/KN_BManageService/GetSlipsByCompanyIDTradingFromToDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/KN_BManageService/GetSlipsByCompanyIDTradingFromTo", ReplyAction="http://tempuri.org/KN_BManageService/GetSlipsByCompanyIDTradingFromToResponse")]
            [WebGet()]
            IAsyncResult BeginGetSlipsByCompanyIDTradingFromTo(Guid companyID, DateTime from, DateTime to, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSlipsByCompanyIDTradingFromTo'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSlipsByCompanyIDTradingFromTo'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSlipsByCompanyIDTradingFromTo' operation.</returns>
            QueryResult<Slip> EndGetSlipsByCompanyIDTradingFromTo(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSlipsByCompanyIDTradingMonthry' operation.
            /// </summary>
            /// <param name="companyID">The value for the 'companyID' parameter of this action.</param>
            /// <param name="monthry">The value for the 'monthry' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/KN_BManageService/GetSlipsByCompanyIDTradingMonthryDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/KN_BManageService/GetSlipsByCompanyIDTradingMonthry", ReplyAction="http://tempuri.org/KN_BManageService/GetSlipsByCompanyIDTradingMonthryResponse")]
            [WebGet()]
            IAsyncResult BeginGetSlipsByCompanyIDTradingMonthry(Guid companyID, DateTime monthry, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSlipsByCompanyIDTradingMonthry'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSlipsByCompanyIDTradingMonthry'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSlipsByCompanyIDTradingMonthry' operation.</returns>
            QueryResult<Slip> EndGetSlipsByCompanyIDTradingMonthry(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSlipTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/KN_BManageService/GetSlipTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/KN_BManageService/GetSlipTypes", ReplyAction="http://tempuri.org/KN_BManageService/GetSlipTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetSlipTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSlipTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSlipTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSlipTypes' operation.</returns>
            QueryResult<SlipType> EndGetSlipTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/KN_BManageService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/KN_BManageService/SubmitChanges", ReplyAction="http://tempuri.org/KN_BManageService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class KN_BManageContextEntityContainer : EntityContainer
        {
            
            public KN_BManageContextEntityContainer()
            {
                this.CreateEntitySet<BusinessType>(EntitySetOperations.All);
                this.CreateEntitySet<Company>(EntitySetOperations.All);
                this.CreateEntitySet<Employee>(EntitySetOperations.All);
                this.CreateEntitySet<Journal>(EntitySetOperations.All);
                this.CreateEntitySet<JournalDetail>(EntitySetOperations.All);
                this.CreateEntitySet<JournalItemBiz>(EntitySetOperations.All);
                this.CreateEntitySet<JournalItemComp>(EntitySetOperations.All);
                this.CreateEntitySet<Slip>(EntitySetOperations.All);
                this.CreateEntitySet<SlipDetail>(EntitySetOperations.All);
                this.CreateEntitySet<SlipType>(EntitySetOperations.All);
            }
        }
    }
}
